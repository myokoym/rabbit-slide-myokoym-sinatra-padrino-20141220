= ゲーム vs. Sinatra

: subtitle
   〜体験版〜
: author
   Masafumi Yokoyama
# : institution
#    Sinatra札幌
: content-source
   Sinatra/Padrino勉強会
: date
   2014/12/20
: allotted-time
   40m
: theme
   nyankosakana

= はじめに

このスライドは((*(('tag:italic:体験版'))*))です。
予告なく内容が変更になる場合がありますのでご了承ください。

= 自己紹介

    # image
    # src = my-icon.png
    # relative_width = 40
    # align = right
    # relative_argin_right = -10

  * @myokoym
  * Sinatra札幌
  * 将棋アマ三段
  * ヌルゲーマー

= 札幌の将棋事情

  * 北海道将棋会館
    * 札幌市中央区)南4西9
  * 北海道将棋連盟のブログ
    * (('note:http://doshoren.blog.fc2.com/'))
  * 札幌将棋情報のブログ
    * (('note:http://blogs.yahoo.co.jp/sapporoshogijoho'))

= Ruby Kaja 2013

  # image
  # src = ruby-kaja-2013.jpg
  # relative_height = 100

= 話すこと

  * 第一部
    * 2013年から2014年にかけてのSinatra札幌での活動について
  * 第二部
    * 表題の件

= 第一部

== property

:as_large_as_possible
  false

= 年表（序盤）

  * 2013/11/24
    * 最初の勉強会
    * Sinatraと見せかけてRabbitの話
  * 2014/02/08
    * 札幌市中央区Ruby会議01
    * RubyでGUIする話

= 札幌市中央区Ruby会議01

  # image
  # src = chuork01-ss.png
  # relative_height = 100
  # reflect_ratio = 0.1

== プロパティ

:enable-title-on-image
  false

= 年表（中盤）

  * 2014/05/10
    * 二回目の勉強会
    * Sinatraと見せかけてGosu（ゲーム用ライブラリ）の話
  * 2014/06/14
    * OSC 2014 Hokkaido
    * Sinatraの帽子を使ったゲームを展示

= OSC 2014 Hokkaido

  # image
  # src = osc2014hokkaido.jpg
  # relative_height = 100
  # reflect_ratio = 0.1

== プロパティ

:enable-title-on-image
  false

= 年表（終盤）

  * 2014/08/17
    * SinatraSapporoSuturday#01
    * ArduinoでLEDをチカチカして納涼
  * 2014/10/11、2014/11/16
    * SinatraSapporoSaturday#02
    * SinatraSapporoSunday#03
    * Padrinoを使い始めた

= ちょっとwait

  # coderay ruby
  events.count |event|
    event.Sinatraメイン?
  end

= 0

= …

= 理由

(('tag:center'))
何かと組み合わせて使っていた

= 何か

  * 1. Rabbit
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo01/'))

  * 2. Gosu
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo02/'))

= 何か

  * ((*1. Rabbit*))
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo01/'))

  * 2. Gosu
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo02/'))

= Rabbit

  # blockquote
  Rubyで書かれた((*プログラマー向け*))のプレゼンテーションツール

= Lavie

  # image
  # src = lavie.png
  # relative_height = 100

= Rabbit

  * 文章はテキストで記述
    * RD、Wiki、Markdownなど
  * 装飾（テーマ）はRubyで記述
    * RubyGemsで簡単に追加
  * バージョン管理しやすい

= Rabbit

  * Ruby-GNOME2（Ruby/GTK2など）を使っている

= Ruby-GNOME2

  # blockquote
  Ruby-GNOME2はGNOMEで使用されるGTK+などの主要なライブラリの
  Rubyバインディング集です。

  (('note:http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/49734'))

= Ruby-GNOME2

  # blockquote
  GTK+はマルチプラットフォーム対応のGUIツールキットなので、マ
  ルチプラットフォーム対応のGUIアプリケーションをRubyで書くこ
  とができます。

  (('note:http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/49734'))

= なぜRuby-GNOME2か

  # image
  # src = logo-gy.svg
  # relative_height = 60

(('tag:center'))
楽しくプログラミングできる

= Ruby/GTK2

GTK+ 2のRubyバインディング

  * 旧バージョン
    * GTK+ 2の開発はほぼ終了
  * 採用実績が多く、安定性は高い
    * Rabbit（プレゼンツール）
    * mikutter（Twitterクライアント）

= GTK+

  * C言語で記述されたGUIツールキット
    * GUIを構成する部品の集まり
    * ボタン、テキストボックスなど
  * マルチプラットフォーム
    * Linux、Windows、OS X

= GUIツールキット

  * マルチプラットフォーム（C/C++）
    * GTK+, Qt, Tk
  * Mac OS X
    * Cocoa
  * Windows
    * .NET Framework

= 何か

  * 1. Rabbit
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo01/'))

  * ((*2. Gosu*))
    * (('note:http://slide.rabbit-shocker.org/authors/myokoym/sinatrasapporo02/'))

= Gosu

  # blockquote
  Gosu is a 2D game development library for the Ruby and 
  C++ programming languages, available for Mac OS X, 
  Windows, and Linux.

  (('note:http://www.libgosu.org/'))

= Gosu

  * 2Dゲーム開発ライブラリ
  * RubyとC++向け
  * マルチプラットフォーム
    * OS X、Windows、Linux、Raspbian
    * iOS（C++）、Android（WIP）

= Gosu 0.8.6

  * 現時点での最新リリース版
    * gem install gosu
  * SDL2ベース
  * Ruby 2.1対応
    * RubyInstaller for Windowsも

= SDL

  * Simple DirectMedia Layer
    * マルチメディアライブラリ
    * 主にゲーム用途
  * C言語で記述
  * マルチプラットフォーム

= ゲーム・マルチメディア\nライブラリ/フレームワーク

  * マルチプラットフォーム
    * SDL、OpenGL
    * Cocos2d、Unity
  * Windows
    * DirectX

= SDL2

  * iOS、Android対応

= 第一部まとめ

= 第二部

== property

:as_large_as_possible
  false

= テーマ

(('tag:center'))
(('tag:xx-large'))
vs.

= vs.（versus）

  # blockquote
  【前置詞】\n
  1. (訴訟・競技などで)…対，…に対する\n
  2. …と対比して、比較して

= 対比させてみる

= 粒度を合わせる

  * GUIアプリケーション
    * Ruby/GTK2、GTK+
  * ゲーム
    * Gosu、SDL
  * Webアプリケーション
    * Sinatra、Rack

= ポイント

  * 動作環境
  * 動作モデル

= ポイント

  * ((*動作環境*))
  * 動作モデル

= 動作環境

  # RT
  GTK+, SDL, Rack
  デスクトップ（ネイティブ）アプリ, デスクトップ（ネイティブ）アプリ, Webサーバー、Webブラウザー

= 構図

(('tag:center'))
(('tag:large'))
ネイティブアプリ\n
vs.\n
Webアプリ

= ネイティブアプリ

  * 動作速度が速い
  * デバイスの機能を活かせる
    * push通知など

= Webアプリ

  * リリース、インストールが楽
  * 他のサービスと連携しやすい
    * 使われる技術が限られる
    * HTTP、JavaScript

= 適材\n適所

== property

:as_large_as_possible
  false

= ポイント

  * 動作環境
  * ((*動作モデル*))

= 動作モデル

  # RT
  GTK+, SDL, Rack
  イベント駆動, フレームレート×イベント, HTTP、JavaScript

= 動作モデル

  * イベント駆動
  * フレームレート
  * HTTP

= 動作モデル

  * ((*イベント駆動*))
  * フレームレート
  * HTTP

= イベント駆動

  # blockquote
  起動すると共にイベントを待機し、起こったイベントにしたがって処理を行う

= イベント駆動

  * イベントを待機
    * イベントハンドラ
  * イベント
    * マウス、キーボードなど

= イベントハンドラ\n（コールバック関数）

  * イベントが起こったときの処理を記述
  * クリックやアクティブ化など

= Ruby/GTK2の\nイベントハンドラ

  # coderay ruby
  window.signal_connect("destroy") do
    # ウィンドウが閉じられた時の処理
  end

  button.signal_connect("clicked") do
    # ボタンがクリックされた時の処理
  end

= 動作モデル

  * イベント駆動
  * ((*フレームレート*))
  * HTTP

= フレームレート

  * 1秒間に一定回数の処理を行う
  * 1秒間に60回の場合、60fps
    * ((*f*))rame ((*p*))er ((*s*))econd

= 1フレームの主な処理

  * 状態の更新
    * イベントや時間経過による
  * 画面への描画

= Gosu

  # coderay ruby
  class Game < Gosu::Window
    def update
      # 1秒間に約60回呼ばれる
    end

    def draw
      # updateとセットで呼ばれる
    end
  end

  Game.new(640, 480, false).show

= 動作モデル

  * イベント駆動
  * フレームレート
  * ((*HTTP*))

= HTTP

  * 「何を」「どう」したいか
  * リクエスト-レスポンス型

= 「何を」

  * URL
    * http://<ホスト名>/[パス]...

= 「どう」

  * メソッド
    * GET
    * POST
    * ...

= Sinatra

  # coderay ruby
  get "/" do
    # http://host.name/ の処理
  end

  post "/new"
    # フォーム等の /new の処理
  end

= リクエスト-レスポンス型

  * クライアントからサーバーへリクエスト
  * サーバーがレスポンスを返したら一区切り
  * 基本的に状態を保存しない
    * セッションやDBなどを使えば可能

= JavaScript

  * プログラミング言語
    * 何でもできる
    * マルチメディアな使い方も

= ご視聴ありがとうございました。当日も来てね。
